import logging
import re
import os
import random
import sqlite3
from collections import defaultdict
from datetime import datetime
from io import BytesIO

from decouple import config
from telegram import Update, Message, ParseMode
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import openai
import requests

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env —Ñ–∞–π–ª–∞
TELEGRAM_TOKEN = config('TELEGRAM_TOKEN')
OPENAI_API_KEY = config('OPENAI_API_KEY')

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞ API –¥–ª—è OpenAI
openai.api_key = OPENAI_API_KEY

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO,
                    handlers=[logging.StreamHandler()])
logger = logging.getLogger(__name__)
for handler in logger.handlers:
    handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s', '%Y-%m-%d %H:%M:%S'))
    handler.setLevel(logging.INFO)
    handler.setStream(open(os.sys.stdout.fileno(), mode='w', encoding='utf-8', buffering=1))

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ—Å–µ–¥
conversation_context = defaultdict(list)

# –ù–∞—á–∞–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è ChatGPT
initial_instructions = [
    {
        "role": "system",
        "content": (
            "–¢—ã –°–≤–µ—Ç–ª–∞–Ω–∞ ‚Äî –º–æ–ª–æ–¥–∞—è –¥–µ–≤—É—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
            "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏ –∏–≥—Ä–∏–≤–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏–π. "
            "–û—Ç–≤–µ—á–∞–π –ø–æ–Ω—è—Ç–Ω–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è markdown-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤). "
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "- *–û, —ç—Ç–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!*\n"
            "- **–°–æ–≥–ª–∞—Å–Ω–∞ —Å —Ç–æ–±–æ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é!**\n"
            "- –ü–æ—á–µ–º—É –±—ã –Ω–∞–º –Ω–µ –æ–±—Å—É–¥–∏—Ç—å —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ? üòä"
        )
    }
]

def add_emojis_at_end(answer: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω–µ—Ü –æ—Ç–≤–µ—Ç–∞."""
    emojis = ['üòä', 'üòâ', 'üòÑ', 'üéâ', '‚ú®', 'üëç', 'üòÇ', 'üòç', 'üòé', 'ü§î', 'ü•≥', 'üòá', 'üôå', 'üåü']
    if random.choice([True, False]):
        return answer
    num_emojis = random.randint(1, 3)
    chosen_emojis = ''.join(random.choices(emojis, k=num_emojis))
    return f"{answer} {chosen_emojis}"

def format_markdown(answer: str) -> str:
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown V1
    escape_chars = r'_*[]()~`>#+-=|{}.!'

    def escape_special_chars(text):
        return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É Markdown-—Ñ–æ—Ä–º–∞—Ç—É
    answer = re.sub(r'(\d+)\.', r'\1\\.', answer)  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –≤ —Å–ø–∏—Å–∫–∞—Ö
    answer = escape_special_chars(answer)  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    return answer

def split_message(message: str, max_length: int = 4096) -> list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π."""
    return [message[i:i + max_length] for i in range(0, len(message), max_length)]

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def init_db():
    conn = sqlite3.connect('chatgpt_logs.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS logs (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        user_message TEXT,
        gpt_reply TEXT,
        timestamp TEXT
    )
    ''')
    conn.commit()
    conn.close()

def log_interaction(user_id, user_message, gpt_reply):
    conn = sqlite3.connect('chatgpt_logs.db')
    cursor = conn.cursor()
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute('''
    INSERT INTO logs (user_id, user_message, gpt_reply, timestamp)
    VALUES (?, ?, ?, ?)
    ''', (user_id, user_message, gpt_reply, timestamp))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ ChatGPT –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
def ask_chatgpt(messages) -> str:
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ ChatGPT: {messages}")
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=messages,
            max_tokens=500,
            temperature=0.7
        )
        answer = response.choices[0].message['content'].strip()
        logger.info(f"–û—Ç–≤–µ—Ç ChatGPT: {answer}")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        formatted_answer = format_markdown(answer)

        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∫–æ–±–æ—á–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —ç–º–æ–¥–∑–∏
        clean_answer = formatted_answer.replace(')', '').replace('(', '')

        return add_emojis_at_end(clean_answer)
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT: {str(e)}"
        logger.error(error_msg)
        return error_msg

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –°–≤–µ—Ç–ª–∞–Ω–∞, —Ç–≤–æ—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞. –î–∞–≤–∞–π –ø–æ–æ–±—â–∞–µ–º—Å—è! üòä')

def extract_text_from_message(message: Message) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω."""
    if message.text:
        return message.text.strip()
    if message.caption:
        return message.caption.strip()
    return ""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update: Update, context: CallbackContext) -> None:
    if not update.message:
        return

    user_id = update.message.from_user.id
    user_message = extract_text_from_message(update.message)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    conversation_context[user_id].append({"role": "user", "content": user_message})

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ ChatGPT
    messages = initial_instructions + conversation_context[user_id]

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
    reply = ask_chatgpt(messages)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç ChatGPT –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    conversation_context[user_id].append({"role": "assistant", "content": reply})

    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
    messages = split_message(reply)
    for msg in messages:
        update.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    log_interaction(user_id, user_message, reply)

def main():
    # –°–æ–∑–¥–∞–µ–º –∞–ø–¥–µ–π—Ç–µ—Ä–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    updater = Updater(TELEGRAM_TOKEN)
    dispatcher = updater.dispatcher

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
