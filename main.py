import re
from collections import defaultdict
from decouple import config
from telegram import Update, ParseMode, Message
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import openai
import speech_recognition as sr
from pydub import AudioSegment
import moviepy.editor as mp
import os
import requests
from io import BytesIO
import random

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env —Ñ–∞–π–ª–∞
TELEGRAM_TOKEN = config('TELEGRAM_TOKEN')
OPENAI_API_KEY = config('OPENAI_API_KEY')

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞ API –¥–ª—è OpenAI
openai.api_key = OPENAI_API_KEY

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ—Å–µ–¥
conversation_context = defaultdict(list)

# –ù–∞—á–∞–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è ChatGPT
initial_instructions = [
    {"role": "system", "content": "–¢—ã –°–≤–µ–∫–ª–∞–Ω–∞ - –º–∏–ª–ª–µ–Ω–∏–∞–ª –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏ –∏–≥—Ä–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏–π. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ—Ç —Å—Ç–∏–ª—å."}
]

def add_emojis_at_end(answer: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω–µ—Ü –æ—Ç–≤–µ—Ç–∞."""
    emojis = ['üòä', 'üòâ', 'üòÑ', 'üéâ', '‚ú®', 'üëç', 'üòÇ', 'üòç', 'üòé', 'ü§î', 'ü•≥', 'üòá', 'üôå', 'üåü']

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å —ç–º–æ–¥–∑–∏ –≤ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if random.choice([True, False]):
        return answer

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏
    num_emojis = random.randint(1, 3)
    chosen_emojis = ''.join(random.choices(emojis, k=num_emojis))

    return f"{answer} {chosen_emojis}"

def clean_drawing_prompt(prompt: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Ç–∞–∫–∏–µ –∫–∞–∫ '–Ω–∞—Ä–∏—Å—É–π', –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞."""
    drawing_keywords = ["–Ω–∞—Ä–∏—Å—É–π", "—Å–æ–∑–¥–∞–π", "–∏–∑–æ–±—Ä–∞–∑–∏", "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "–ø–æ–∫–∞–∂–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É", "—Å–¥–µ–ª–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"]
    for keyword in drawing_keywords:
        if keyword in prompt.lower():
            prompt = prompt.lower().replace(keyword, "").strip()
    return prompt

def is_drawing_request(message: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–∫–∞–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    drawing_keywords = ["–Ω–∞—Ä–∏—Å—É–π", "—Å–æ–∑–¥–∞–π", "–∏–∑–æ–±—Ä–∞–∑–∏", "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "–ø–æ–∫–∞–∂–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É", "—Å–¥–µ–ª–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–ø–æ–∫–∞–∂–∏ –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç", "–ø–æ–∫–∞–∂–∏ –∫–∞–∫ –æ–Ω–∏ –≤—ã–≥–ª—è–¥–µ–ª–∏"]
    message = message.lower()
    return any(keyword in message for keyword in drawing_keywords)

def send_image(update: Update, context: CallbackContext, image_url: str) -> None:
    try:
        response = requests.get(image_url)
        image = BytesIO(response.content)
        image.name = 'image.png'  # –î–∞–µ–º –∏–º—è —Ñ–∞–π–ª—É, —á—Ç–æ–±—ã Telegram –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª
        update.message.reply_photo(photo=image)
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
        update.message.reply_text(error_msg)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ ChatGPT –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
def ask_chatgpt(messages) -> str:
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",  # –ò–ª–∏ "gpt-3.5-turbo"
            messages=messages
        )
        answer = response.choices[0].message['content'].strip()

        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∫–æ–±–æ—á–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —ç–º–æ–¥–∑–∏
        clean_answer = answer.replace(')', '').replace('(', '')

        return add_emojis_at_end(clean_answer)
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT: {str(e)}"
        return error_msg

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def generate_image(prompt: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é."""
    try:
        response = openai.Image.create(
            prompt=prompt,
            n=1,
            size="1024x1024"
        )
        image_url = response['data'][0]['url']
        return image_url
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
        return error_msg

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø - –°–≤–µ–∫–ª–∞–Ω–∞, —Ç–≤–æ—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞. –î–∞–≤–∞–π –ø–æ–æ–±—â–∞–µ–º—Å—è! üòä')

def extract_text_from_message(message: Message) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω."""
    if message.text:
        return message.text.strip()
    if message.caption:
        return message.caption.strip()
    return ""

def should_respond(update: Update, context: CallbackContext) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –±–æ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    message = update.message

    if not message:
        return False

    bot_username = context.bot.username

    # 1. –ï—Å–ª–∏ —É–ø–æ–º—è–Ω—É–ª–∏ –Ω–∏–∫–Ω–µ–π–º –±–æ—Ç–∞
    if message.entities:
        for entity in message.entities:
            if entity.type == 'mention' and message.text[entity.offset:entity.offset + entity.length] == f"@{bot_username}":
                return True

    # 2. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if message.reply_to_message:
        if message.reply_to_message.from_user.username == bot_username:
            return True

    # 3. –ï—Å–ª–∏ —É–ø–æ–º—è–Ω—É–ª–∏ –±–æ—Ç–∞ –∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —á—å—ë-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message:
        if message.entities:
            for entity in message.entities:
                if entity.type == 'mention' and message.text[entity.offset:entity.offset + entity.length] == f"@{bot_username}":
                    return True

    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def process_voice_message(voice_message, user_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç."""
    file_id = voice_message.file_id
    new_file = voice_message.get_file()

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_path = f"voice_{user_id}.ogg"
    new_file.download(file_path)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ OGG –≤ WAV –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    sound = AudioSegment.from_ogg(file_path)
    wav_path = f"voice_{user_id}.wav"
    sound.export(wav_path, format="wav")

    # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
    recognizer = sr.Recognizer()
    with sr.AudioFile(wav_path) as source:
        audio_data = recognizer.record(source)
        try:
            text = recognizer.recognize_google(audio_data, language="ru-RU")
            os.remove(file_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            os.remove(wav_path)
            return text
        except sr.UnknownValueError:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        except sr.RequestError:
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–∞."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π
def process_video_message(video_message, user_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –µ–≥–æ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏."""
    file_id = video_message.file_id
    new_file = video_message.get_file()

    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª
    file_path = f"video_{user_id}.mp4"
    new_file.download(file_path)

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
    try:
        video = mp.VideoFileClip(file_path)
        audio_path = f"audio_from_video_{user_id}.wav"
        video.audio.write_audiofile(audio_path)

        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —Å –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏
        recognizer = sr.Recognizer()
        with sr.AudioFile(audio_path) as source:
            audio_data = recognizer.record(source)
            try:
                text = recognizer.recognize_google(audio_data, language="ru-RU")
                os.remove(file_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                os.remove(audio_path)
                return text
            except sr.UnknownValueError:
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ."
            except sr.RequestError:
                return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_voice(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    voice_message = update.message.voice

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
    user_message = process_voice_message(voice_message, user_id)
    if not user_message:
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    conversation_context[user_id].append({"role": "user", "content": user_message})

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ ChatGPT
    messages = initial_instructions + conversation_context[user_id]

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
    reply = ask_chatgpt(messages)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç ChatGPT –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    conversation_context[user_id].append({"role": "assistant", "content": reply})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    update.message.reply_text(reply, parse_mode=ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π
def handle_video(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    video_message = update.message.video

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
    user_message = process_video_message(video_message, user_id)
    if not user_message:
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    conversation_context[user_id].append({"role": "user", "content": user_message})

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ ChatGPT
    messages = initial_instructions + conversation_context[user_id]

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
    reply = ask_chatgpt(messages)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç ChatGPT –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    conversation_context[user_id].append({"role": "assistant", "content": reply})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    update.message.reply_text(reply, parse_mode=ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update: Update, context: CallbackContext, is_voice=False, is_video=False) -> None:
    if not update.message:
        return

    user_id = update.message.from_user.id
    user_message = extract_text_from_message(update.message)

    if is_voice:
        user_message = process_voice_message(update.message.reply_to_message.voice, user_id)
        if not user_message:
            return

    if is_video:
        user_message = process_video_message(update.message.reply_to_message.video, user_id)
        if not user_message:
            return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ
    if is_drawing_request(user_message):
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        prompt = clean_drawing_prompt(user_message)
        image_url = generate_image(prompt)
        send_image(update, context, image_url)
        return

    if not is_voice and not is_video and not should_respond(update, context):
        return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message.reply_to_message and not is_voice and not is_video:
        original_message = extract_text_from_message(update.message.reply_to_message)
        if not original_message and update.message.reply_to_message.voice:
            original_message = process_voice_message(update.message.reply_to_message.voice, user_id)
        if not original_message and update.message.reply_to_message.video:
            original_message = process_video_message(update.message.reply_to_message.video, user_id)
        if not original_message:
            return
        user_message = f"{original_message} {user_message}"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    conversation_context[user_id].append({"role": "user", "content": user_message})

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ ChatGPT
    messages = initial_instructions + conversation_context[user_id]

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
    reply = ask_chatgpt(messages)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç ChatGPT –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    conversation_context[user_id].append({"role": "assistant", "content": reply})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    update.message.reply_text(reply, parse_mode=ParseMode.MARKDOWN)

def main():
    # –°–æ–∑–¥–∞–µ–º –∞–ø–¥–µ–π—Ç–µ—Ä–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    updater = Updater(TELEGRAM_TOKEN)
    dispatcher = updater.dispatcher

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dispatcher.add_handler(MessageHandler(Filters.voice, handle_voice))
    dispatcher.add_handler(MessageHandler(Filters.video, handle_video))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
